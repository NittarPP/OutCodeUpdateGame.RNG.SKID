local Workspace = game:GetService("Workspace")

-- Create a tree model
local tree = Instance.new("Model")
tree.Name = "DeadTree"

-- Trunk
local trunk = Instance.new("Part")
trunk.Name = "Trunk"
trunk.Size = Vector3.new(2, 15, 2)
trunk.Anchored = true
trunk.Position = Vector3.new(0, trunk.Size.Y / 2, 0)
trunk.BrickColor = BrickColor.new("Dark brown")
trunk.Material = Enum.Material.Wood
trunk.Parent = tree

-- Function to create a branch
local function createBranch(offsetPos, rotation)
	local branch = Instance.new("Part")
	branch.Size = Vector3.new(1, 6, 1)
	branch.Anchored = true
	branch.BrickColor = BrickColor.new("Dark brown")
	branch.Material = Enum.Material.Wood
	branch.CFrame = CFrame.new(offsetPos) * CFrame.Angles(rotation.X, rotation.Y, rotation.Z)
	branch.Parent = tree
end

-- Create some jagged branches
createBranch(Vector3.new(0, 12, 0), Vector3.new(math.rad(45), 0, math.rad(20)))
createBranch(Vector3.new(0.5, 13.5, 0.5), Vector3.new(math.rad(50), math.rad(20), 0))
createBranch(Vector3.new(-0.5, 11.5, -0.5), Vector3.new(math.rad(40), math.rad(-30), 0))
createBranch(Vector3.new(0.8, 14, -0.8), Vector3.new(math.rad(60), math.rad(45), math.rad(10)))

-- Optional: center on baseplate
local centerX, centerZ = 0, 0
local baseplate = Workspace:FindFirstChild("Baseplate")
if baseplate then
	centerX = baseplate.Position.X
	centerZ = baseplate.Position.Z
end

-- Offset tree parts to center of map
for _, part in pairs(tree:GetChildren()) do
	if part:IsA("BasePart") then
		part.Position += Vector3.new(centerX, 0, centerZ)
	end
end

-- Parent tree to workspace
tree.Parent = Workspace
