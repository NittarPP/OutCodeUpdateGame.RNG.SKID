--game.Workspace.TREE:Destroy()

local partsWithId = {}
local awaitRef = {}

local function applyProperties(instance, properties)
	for prop, val in pairs(properties) do
		pcall(function()
			instance[prop] = val
		end)
	end

	if instance:IsA("BasePart") then
		instance.Anchored = true
	end
end

local function buildFromData(data, parent)
	local newInstance = Instance.new(data.Type)
	if data.Properties then
		applyProperties(newInstance, data.Properties)
	end
	newInstance.Parent = parent

	if data.Children then
		for _, child in ipairs(data.Children) do
			buildFromData(child, newInstance)
		end
	end

	return newInstance
end

local function centerModel(model)
	local parts = {}

	local function getParts(obj)
		if obj:IsA("BasePart") then table.insert(parts, obj) end
		for _, child in ipairs(obj:GetChildren()) do
			getParts(child)
		end
	end

	getParts(model)

	if #parts == 0 then return end

	local total = Vector3.new(0, 0, 0)
	for _, part in ipairs(parts) do
		total += part.Position
	end

	local center = total / #parts
	local offset = Vector3.new(-center.X, 320, -center.Z)

	for _, part in ipairs(parts) do
		part.CFrame = part.CFrame + offset
	end
end


local function SizeModel(model, targetSize)
	local parts = {}

	-- Collect all BaseParts
	local function getParts(obj)
		if obj:IsA("BasePart") then
			table.insert(parts, obj)
		end
		for _, child in ipairs(obj:GetChildren()) do
			getParts(child)
		end
	end

	getParts(model)

	if #parts == 0 then return end

	-- Get the bounding box size and center
	local cframe, size = model:GetBoundingBox()

	-- Calculate scale factor
	local scale = targetSize / math.max(size.X, size.Y, size.Z) -- Uniform scale based on largest dimension

	-- Scale all parts and reposition
	for _, part in ipairs(parts) do
		local offset = part.Position - cframe.Position
		part.Size *= scale
		part.Position = cframe.Position + offset * scale
	end
end


--centerModel(tree)
--SizeModel(tree, 100)
